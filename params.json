{
  "name": "Angular-phonenumber-formatter",
  "tagline": "Formats a international and (American) national phone numbers using angular and Googles i18n library",
  "body": "This library formats American national numbers and international numbers using Angular, [Googles i18n Phone Number Formatter](https://github.com/googlei18n/libphonenumber).\r\n\r\n[See Demo](http://lposen.github.io/angular-phonenumber-formatter/app/phoneNumberFormatter/#/)\r\n\r\nNOTE: This was made for a specific project, so is not very configurable.\r\n\r\n## Requirements\r\n\r\n- AngularJS\r\n- Lodash\r\n\r\n## Assumptions\r\n- National numbers are American numbers.  They will be decorated as (###) ###-####.\r\n- X's are not stripped from national numbers as they could be the precursor for extensions.  Other letters are.\r\n- X's are stripped from international extensions (a company decision)\r\n- If a national number has more than 10 digits, it will format the first 10 digits and append the rest, seperated by a space.\r\n* Eg: 1234567890x123 becomes (123) 456-7890 x123\r\n- International numbers will begin with a \"+\" to differentiate them from national numbers\r\n\r\n## Usage\r\n### Setup\r\nAdd the module as a dependency\r\n\r\n    \r\n    angular.module( \"app\", [\r\n       \"phoneNumberFormatter\"\r\n    ] );\r\n\r\n### Input\r\nAdd \"phone-number\" as an attribute and the value as ng-model\r\n\r\n\r\n    <input type=\"text\" ng-model=\"myPhoneNumber\" phone-number></input>\r\n\r\n\r\n### Element\r\nUse \"phone-number\" as an attribute or element. Add the value as ng-model.\r\nIf you're using it as an attribute, be aware that it creates an isolate scope, so you cannot use another attribute that creates an isolate scope on the same element\r\n\r\n\r\n    <phone-number ng-model=\"myPhoneNumber\"></phone-number>\r\n\r\nor\r\n\r\n    <p phone-number ng-model=\"myPhoneNumber\"></p>\r\n\r\n\r\n### Filter\r\n\r\n    <p>{{myPhoneNumber|phoneNumber}}</p>\r\nor\r\n\r\n    $scope.myPhoneNumber = $filter('phoneNumber')($scope.myPhoneNumber);\r\n\r\n### Factory (PhoneNumberFormatter)\r\n\r\n    var myNum = 1234567890,\r\n        numberFormatter = new PhoneNumberFormatter();\r\n    \r\n    var formattedNumber = numberFormatter.getFormattedNumber(myNum); //(123) 456-7890\r\n    var isInternational = numberFormatter.isInternational(myNum); //false\r\n    var unformattedNumer = numberFormatter.trim(myNum); //1234567890\r\n\r\n    \r\n\r\n## Demo\r\n1. Download app\r\n2. Run \"npm install\"\r\n3. Run \"bower install\"\r\n4. Run \"grunt serve\"",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}